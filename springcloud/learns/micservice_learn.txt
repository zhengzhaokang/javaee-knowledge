Spring Cloud 5大组件有哪些?
通常情况下:
●Eureka :注册中心
Ribbon:负载均衡
Feign:远程调用
●Hystrix:服务熔断
●Zuul/Gateway:网关
随着SpringCloudAlibba在国内兴起，我们项目中使用了一些阿里巴巴的组件注册中心/配置中心 Nacos
负载均衡 Ribbon
服务调用 Feiqn
服务保护 sentinel
服务网关 Gateway

服务注册和发现是什么意思?Spring Cloud 如何实现服务注册发现?
我们当时项目采用的eureka作为注册中心，这个也是spring coud体系中的一个核心组件
1.服务注册:服务提供者需要把自己的信息注册到eureka，由eureka来保存这些信息，比如服务名称、ip、端口等等
2.服务发现:消费者向eureka拉取服务列表信息，如果服务提供者有集群，则消费者会利用负载均衡算法，选择一个发起调用
3.服务健康监控:服务提供者会每隔30秒向eureka发送心跳，报告健康状态，如果eureka服务90秒没接收到心跳，从eureka中剔除


我看你之前也用过nacos、你能说下nacos与eureka的区别?
Nacos与eureka的共同点(注册中心)
1.都支持服务注册和服务拉取
2.都支持服务提供者心跳方式做健康检测
Nacos与Eureka的区别(注册中心)
1.Nacos支持服务端主动检测提供者状态:临时实例采用心跳模式，非临时实例采用主动检测模式
2.临时实例心跳不正常会被剔除，非临时实例则不会被剔除
3.Nacos支持服务列表变更的消息推送模式，服务列表更新更及时
4.Nacos集群默认采用AP方式，当集群中存在非临时实例时，采用CP模式:Eureka采用AP方式
5.Nacos还支持了配置中心，eureka则只有注册中心，也是选择使用nacos的一个重要原因

你们项目负载均衡如何实现的?
微服务的负载均衡主要使用了一个组件Ribbon，比如，
我们在使用feign远程调用的过程中，底层的负载均衡就是使用了ribbon

Ribbon负载均衡策略有哪些 ?
1.RoundRobinRule:简单轮询服务列表来选择服务器
2.WeightedResponseTimeRule:按照权重来选择服务器，响应时间越长，权重越小
3.RandomRule:随机选择一个可用的服务器
4.BestAvailableRule:忽略那些短路的服务器，并选择并发数较低的服务器
5.RetryRule:重试机制的选择逻辑
6.AvailabilityFilteringRule:可用性敏感策略，先过滤非健康的，再选择连接数较小的实例
7.ZoneAvoidanceRule:以区域可用的服务器为基础进行服务器的选择。使用Zone对服务器进行分类，
这个Zone可以理解为一个机房、一个机架等。而后再对Zone内的多个服务做轮询  （默认策略）

如果想自定义负载均衡策略如何实现?
提供了两种方式:
1，创建类实现IRule接口，可以指定负载均衡策略(全局)
2，在客户端的配置文件中，可以配置某一个服务调用的负载均衡策略(局部)

什么是服务雪崩，怎么解决这个问题?
1.服务雪崩:一个服务失败，导致整条链路的服务都失败的情形
2.服务降级:服务自我保护的一种方式，或者保护下游服务的一种方式，用于确保服务不会受请求突增影响变得不可用，
确保服务不会崩溃，一般在实际开发中与feign接口整合，编写降级逻辑
3.服务熔断:默认关闭，需要手动打开，如果检测到 10 秒内请求的失败率超过 50%，就触发熔断机制。之后每隔
5秒重新尝试请求微服务，如果微服务不能响应，继续走熔断机制。如果微服务可达，则关闭熔断机制，恢复正常请求

你们的微服务是怎么监控的?
我们项目中采用的skywalking进行监控的
1，skywalking主要可以监控接口、服务、物理实例的一些状态。特别是在压测的时候可以
看到众多服务中哪些服务和接口比较慢，我们可以针对性的分析和优化。
2，我们还在skywalking设置了告警规则，特别是在项目上线以后，如果报错，我们分别设置了
可以给相关负责人发短信和发邮件，第一时间知道项目的bug情况，第一时间修复

你们项目中有没有做过限流?怎么做的?
1，先来介绍业务，什么情况下去做限流，需要说明QPS具体多少
我们当时有一个活动，到了假期就会抢购优惠券，QPS最高可以达到2000，平时10-50之间，
为了应对突发流量需要做限流常规限流，为了防止恶意攻击，保护系统正常运行，我们当时系统能够承受最大的QPS是多少(压测结果)
2，nginx限流
控制速率(突发流量)，使用的漏桶算法来实现过滤，让请求以固定的速率处理请求，
可以应对突发流量控制并发数，限制单个ip的链接数和并发链接的总数
3。网关限流
在spring cloud gateway中支持局部过滤器RequestRateLimiter来做限流，使用的是令牌桶算法可以
根据ip或路径进行限流，可以设置每秒填充平均速率，和令牌桶总容量

解释一下CAP和BASE
CAP 定理(一致性、可用性、分区容错性)
分布式系统节点通过网络连接，一定会出现分区问题(P)1.
2.当分区出现时，系统的一致性(C)和可用性(A)就无法同时满足
BASE理论
基本可用软状态2.
3.最终一致
解决分布式事务的思想和模型:
最终一致思想:各分支事务分别执行并提交，如果有不一致的情况，再想办法恢复数据(AP)
强一致思想:各分支事务执行完业务不要提交，等待彼此结果。而后统一提交或回滚(CP)

你们采用哪种分布式事务解决方案?
简历上写的微服务，只要是发生了多个服务之间的写操作，
都需要进行分布式事务控制描述项目中采用的哪种方案(seataMQ)
1.seata的XA模式，CP，需要互相等待各个分支事务提交，可以保证强一致性，性能差(银行业务)
2.seata的AT模式，AP，底层使用undolog 实现，性能好 (互联网业务)
3.seata的TCC模式，AP，性能较好，不过需要人工编码实现 (银行业务)
4.MQ模式实现分布式事务，在A服务写数据的时候， (互联网业务)
需要在同一个事务内发送消息到另外一个事务,异步，性能最好


分布式服务的接口幂等性如何设计?
幂等: 多次调用方法或者接口不会改变业务状态，可以保证重复调用的结果和单次调用的结果一致
1.如果是新增数据，可以使用数据库的唯一索引
2.如果是新增或修改数据
分布式锁，性能较低
使用token+redis来实现，性能较好
第一次请求，生成一个唯-token存入redis，返回给前端
第二次请求，业务处理，携带之前的token，到redis进行验证，
如果存在，可以执行业务，删除token;如果不存在，则直接返回，不处理业务
3.唯一标识:客户端生成全局唯一请求ID（如UUID、Snowflake），
服务端通过Redis或数据库校验是否已处理,存在则直接返回结果，否则处理并记录。
(简单高效，适用于绝大多数场景)
场景					推荐方案				原因
高并发插入（如订单）	数据库唯一约束 + 防重表	性能稳定，直接利用数据库特性
复杂业务操作（如支付）	Token机制 + 状态机控制	灵活性高，支持多步骤校验
分布式锁场景（如库存）	Redis分布式锁 + 乐观锁	平衡性能与一致性，避免超卖
消息队列消费			唯一标识 + 状态机控制	确保消息仅处理一次，支持断点续传

你负责项目的时候遇到了哪些比较棘手的问题?怎么解决的
1，什么背景(技术问题)
2，过程(解决问题的过程)
3，最终落地方案
4. 提前准备
01设计模式 [工厂/策略/责任链]
02 线上BUG [CPU飙高/内存泄漏/线程死锁]
03 调优 [慢接口/慢SQL/缓存方案]
4.组件封装[分布式锁/接口幂等/分布式事务/支付通用]

生产问题怎么排查?
已经上线的bug排查的思路:1，先分析日志，通常在业务中都会有日志的记录，或者查看系统日志，
或者查看日志文件，然后定位问题
2，远程debug(通常公司的正式环境(生产环境)是不允许远程debug的。
一般远程debug都是公司的测试环境，方便调试代码
3. Arthas + log

怎么快速定位系统的瓶颈？
1..压测(性能测试)
压测目的:给出系统当前的性能状况;定位系统性能瓶颈或潜在性能瓶颈
指标:响应时间、QPS、并发数、吞吐量、CPU利用率、内存使用率、磁盘10、错误率
压测工具:LoadRunner、Apache Jmeter ..
后端工程师:根据压测的结果进行解决或调优(接口、代码报错、并发达不到要求..)
2.监控工具、链路追踪工具
监控工具:Prometheus+Grafana
链路追踪工具:skywalking、Zipkin
3.线上诊断工具Arthas(阿尔萨斯)
官网:https:/arthas.aliyun.com/